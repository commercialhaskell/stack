jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 180
  variables:
  - group: AWS_Keys
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      stack:
        BUILD: stack
    maxParallel: 1
  steps:
  - script: |
      export AWS_ACCESS_KEY_ID="$(AWS_ACCESS_KEY_ID)";
      export AWS_SECRET_ACCESS_KEY="$(AWS_SECRET_ACCESS_KEY)";
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      echo $STACK_ROOT
      mkdir -p ~/.local/bin
      curl -f -L "https://github.com/fpco/cache-s3/releases/download/${CACHE_S3_VERSION}/cache-s3-${CACHE_S3_VERSION}-${OS_NAME}-x86_64.tar.gz" -o ~/.local/bin/cache-s3.tar.gz
      tar xzf ~/.local/bin/cache-s3.tar.gz -C ~/.local/bin
      export PATH=$HOME/.local/bin:$PATH;
      cache-s3 --prefix="${CACHE_S3_PREFIX}" --git-branch="$(Build.SourceBranchName)" --suffix="${OS_NAME}" restore stack --base-branch="${BASE_BRANCH}"
      cache-s3 --prefix="${CACHE_S3_PREFIX}" --git-branch="$(Build.SourceBranchName)" --suffix="${OS_NAME}" restore stack work --base-branch="${BASE_BRANCH}"
      ./.travis-setup.sh
      brew install mercurial
      export PATH=$HOME/.local/bin:/opt/ghc/$GHCVER/bin:/opt/happy/1.19.5/bin:/opt/alex/3.1.7/bin:$PATH
      set -ex
      stack --no-terminal install cabal-install
      set +ex
    env:
      OS_NAME: ${{ parameters.os }}
    displayName: 'Installation ${{parameters.os}}'
  - script: |
      curl https://nixos.org/nix/install | sh
      . ~/.nix-profile/etc/profile.d/nix.sh
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      export PATH=$HOME/.local/bin:$PATH;
      set -ex
      stack test --flag stack:integration-tests stack:test:stack-integration-test
      set +ex
    displayName: Integration Test
  - script: |
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      export PATH=$HOME/.local/bin:$PATH;
      stack install stack --local-bin-path $(Build.ArtifactStagingDirectory)
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    displayName: Gzip Stack
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: stack-osx
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
  - script: |
      export PATH=$HOME/.local/bin:$PATH;
      export AWS_ACCESS_KEY_ID="$(AWS_ACCESS_KEY_ID)";
      export AWS_SECRET_ACCESS_KEY="$(AWS_SECRET_ACCESS_KEY)";
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      if [ "$(Build.SourceBranchName)" = "${BASE_BRANCH}" ]; then
        cache-s3 --prefix="${CACHE_S3_PREFIX}" --git-branch="$(Build.SourceBranchName)" --suffix="${OS_NAME}" save stack;
      fi;
      cache-s3 --prefix="${CACHE_S3_PREFIX}" --git-branch="$(Build.SourceBranchName)" --suffix="${OS_NAME}" save stack work
    env:
      OS_NAME: ${{ parameters.os }}
    displayName: 'Cache data'
