jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 240
  variables:
  - group: AWS_Keys
  pool:
    vmImage: ${{ parameters.vmImage }}
  steps:
  - powershell: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      Invoke-WebRequest -Uri "https://github.com/fpco/cache-s3/releases/download/$env:CACHE_S3_VERSION/cache-s3-$env:CACHE_S3_VERSION-$env:OS_NAME-x86_64.zip" -OutFile $env:TEMP\cache-s3.zip
      Expand-Archive $env:TEMP\cache-s3.zip -DestinationPath $env:TEMP\
    env:
      OS_NAME: ${{ parameters.os }}
    displayName: Download binaries
  - powershell: |
      choco install nsis-unicode -y
    displayName: 'Chocolatey installation ${{parameters.os}}'
  - bash: |
      export AWS_ACCESS_KEY_ID="$(AWS_ACCESS_KEY_ID)";
      export AWS_SECRET_ACCESS_KEY="$(AWS_SECRET_ACCESS_KEY)";
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      export PATH=$PATH:"/C/Program Files/Mercurial/"
      choco install hg -y
      /tmp/cache-s3 --prefix="${CACHE_S3_PREFIX}" --git-branch="$(Build.SourceBranchName)" --suffix="${OS_NAME}" restore stack --base-branch="${BASE_BRANCH}"
      /tmp/cache-s3 --prefix="${CACHE_S3_PREFIX}" --git-branch="$(Build.SourceBranchName)" --suffix="${OS_NAME}" restore stack work --base-branch="${BASE_BRANCH}"
      curl -sSkL http://www.stackage.org/stack/windows-x86_64 -o /usr/bin/stack.zip
      unzip -o /usr/bin/stack.zip -d /usr/bin/
      stack setup
      stack --version
    env:
      OS_NAME: ${{ parameters.os }}
    displayName: 'Installation ${{parameters.os}}'
  - bash: |
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      export PATH=$PATH:"/C/Program Files/Mercurial/"
      stack etc/scripts/release.hs check
    displayName: Integration Test
  - powershell: |
      $env:STACK_ROOT = "$(Build.SourcesDirectory)\.stack-root"
      $env:PATH += ";$env:HOME\.local\bin"
      stack etc/scripts/release.hs --arch=x86_64 build
      copy _release/stack-* $(Build.ArtifactStagingDirectory)
    displayName: Build bindist
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: stack-windows
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
  - bash: |
      export AWS_ACCESS_KEY_ID="$(AWS_ACCESS_KEY_ID)";
      export AWS_SECRET_ACCESS_KEY="$(AWS_SECRET_ACCESS_KEY)";
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      export PATH=$HOME/.local/bin:$PATH;
      if [ "$(Build.SourceBranchName)" = "${BASE_BRANCH}" ]; then
        /tmp/cache-s3 --prefix="${CACHE_S3_PREFIX}" --git-branch="$(Build.SourceBranchName)" --suffix="${OS_NAME}" save stack;
      fi;
      /tmp/cache-s3 --prefix="${CACHE_S3_PREFIX}" --git-branch="$(Build.SourceBranchName)" --suffix="${OS_NAME}" save stack work
    env:
      OS_NAME: ${{ parameters.os }}
    displayName: 'Cache data'
