jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 240
  variables:
  - group: AWS_Keys
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      stack:
        BUILD: stack
    maxParallel: 1
  steps:
  - script: |
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      echo $STACK_ROOT
      mkdir -p ~/.local/bin
      curl -f -L "https://github.com/fpco/cache-s3/releases/download/${CACHE_S3_VERSION}/cache-s3-${CACHE_S3_VERSION}-${OS_NAME}-x86_64.tar.gz" -o ~/.local/bin/cache-s3.tar.gz
      tar xzf ~/.local/bin/cache-s3.tar.gz -C ~/.local/bin
      export PATH=$HOME/.local/bin:$PATH;
      cache-s3 --prefix="${CACHE_S3_PREFIX}/${OS_NAME}" --git-branch="$(Build.SourceBranchName)" restore stack --base-branch="${BASE_BRANCH}"
      cache-s3 --prefix="${CACHE_S3_PREFIX}/${OS_NAME}" --git-branch="$(Build.SourceBranchName)" restore stack work --base-branch="${BASE_BRANCH}"
      etc/scripts/ci-setup.sh
      export PATH=$HOME/.local/bin:/opt/ghc/$GHCVER/bin:/opt/happy/1.19.5/bin:/opt/alex/3.1.7/bin:$PATH
    env:
      OS_NAME: ${{ parameters.os }}
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
    displayName: 'Installation ${{parameters.os}}'
  - script: |
      # Retry installing nix due to nondeterministic error
      #   Fatal error: glibc detected an invalid stdio handle
      # See:
      #   https://github.com/nh2/static-haskell-nix/pull/27#issuecomment-502652181
      #   https://github.com/NixOS/nix/issues/2733
      (for i in {1..5}; do bash <(curl https://nixos.org/nix/install) && exit 0; done; exit 1)
      source ~/.profile
      nix-channel --add https://nixos.org/channels/nixos-19.09 nixpkgs
      nix-channel --update # Get GHC 8.2.2
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      export PATH=$HOME/.local/bin:$PATH;
      stack etc/scripts/release.hs check
    displayName: Integration Test
  - script: |
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      export PATH=$HOME/.local/bin:$PATH;
      set -ex
      stack etc/scripts/release.hs build
      cp _release/stack-* $(Build.ArtifactStagingDirectory)
      set +ex
    displayName: Build bindist
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: stack-linux
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
  - script: |
      export PATH=$HOME/.local/bin:$PATH;
      export AWS_ACCESS_KEY_ID="$(AWS_ACCESS_KEY_ID)";
      export AWS_SECRET_ACCESS_KEY="$(AWS_SECRET_ACCESS_KEY)";
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      if [ "$(Build.SourceBranchName)" = "${BASE_BRANCH}" ]; then
        cache-s3 --prefix="${CACHE_S3_PREFIX}/${OS_NAME}" --git-branch="$(Build.SourceBranchName)" save stack;
      fi;
      cache-s3 --prefix="${CACHE_S3_PREFIX}/${OS_NAME}" --git-branch="$(Build.SourceBranchName)" save stack work
    env:
      OS_NAME: ${{ parameters.os }}
    displayName: 'Cache data'
