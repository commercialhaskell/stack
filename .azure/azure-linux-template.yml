jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 120
  variables:
  - group: AWS_Keys
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      GHC 8.4:
        BUILD: stack
        STACK_YAML: stack-ghc-84.yaml
        EXTRA_SUFFIX: ""
      GHC 8.6:
        BUILD: stack
        STACK_YAML: stack-ghc-86.yaml
        EXTRA_SUFFIX: ""
      GHC 8.8:
        BUILD: stack
        STACK_YAML: stack-ghc-88.yaml
        EXTRA_SUFFIX: ""
      Alpine:
        BUILD: stack
        # Temporary fix for CI failure
        # STACK_YAML: stack.yaml
        EXTRA_SUFFIX: "alpine"
        STACK_ARGS: --docker --system-ghc --no-install-ghc --flag stack:static
      style:
        BUILD: style
        EXTRA_SUFFIX: ""
      pedantic:
        BUILD: pedantic
        STACK_YAML: stack.yaml
        EXTRA_SUFFIX: ""
  steps:
  - script: |
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      mkdir -p ~/.local/bin
      curl -f -L "https://github.com/fpco/cache-s3/releases/download/${CACHE_S3_VERSION}/cache-s3-${CACHE_S3_VERSION}-${OS_NAME}-x86_64.tar.gz" -o ~/.local/bin/cache-s3.tar.gz
      tar xzf ~/.local/bin/cache-s3.tar.gz -C ~/.local/bin
      export PATH=$HOME/.local/bin:$PATH;
      cache-s3 --prefix="${CACHE_S3_PREFIX}" --git-branch="$(Build.SourceBranchName)" --suffix="${OS_NAME}${EXTRA_SUFFIX}" restore stack --base-branch="${BASE_BRANCH}"
      cache-s3 --prefix="${CACHE_S3_PREFIX}" --git-branch="$(Build.SourceBranchName)" --suffix="${OS_NAME}${EXTRA_SUFFIX}" restore stack work --base-branch="${BASE_BRANCH}"
      etc/scripts/ci-setup.sh
      case "$BUILD" in
        style)
          ./etc/scripts/get-hlint.sh
          export PATH="$(pwd)"/hlint:$PATH
          ;;
        *)
          export PATH=$HOME/.local/bin:$PATH
          stack test $STACK_ARGS --bench --only-dependencies
          ;;
      esac
      set -ex
      case "$BUILD" in
        style)
          hlint src/
          hlint src/ --cpp-define=WINDOWS=1
          hlint test/ --cpp-simple
          ;;
        stack)
          stack test $STACK_ARGS --haddock --no-haddock-deps --ghc-options="-Werror" --copy-bins --local-bin-path bin

          # Get output about whether the exe is dynamically linked
          if [[ "$EXTRA_SUFFIX" == "alpine" ]]
          then
              # ldd returns exit code 1 if it's static, so failure is success
              (ldd ./bin/stack && exit 1) || true
          else
              ldd ./bin/stack
          fi

          # Make sure we can run the executable on this OS
          # Important to make sure the Alpine exe is properly static
          ./bin/stack --version

          ;;
        pedantic)
          stack --system-ghc build --pedantic
          ;;
        cabal)
          cabal install --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES

          ORIGDIR=$(pwd)
          for dir in $PACKAGES
          do
            cd $dir
            cabal check || [ "$CABALVER" == "1.16" ]
            cabal sdist
            PKGVER=$(cabal info . | awk '{print $2;exit}')
            SRC_TGZ=$PKGVER.tar.gz
            cd dist
            tar zxfv "$SRC_TGZ"
            cd "$PKGVER"
            cabal configure --enable-tests --ghc-options -O0
            cabal build
            if [ "$CABALVER" = "1.16" ] || [ "$CABALVER" = "1.18" ]; then
              cabal test
            else
              cabal test --show-details=streaming
            fi
            cd $ORIGDIR
          done
          ;;
      esac
      set +ex
    env:
      OS_NAME: ${{ parameters.os }}
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
    displayName: 'Installation ${{parameters.os}}'
    continueOnError: ${{ eq(variables['STACK_YAML'], 'stack-ghc-86.yaml') }}
  - script: |
      export PATH=$HOME/.local/bin:$PATH;
      export AWS_ACCESS_KEY_ID="$(AWS_ACCESS_KEY_ID)";
      export AWS_SECRET_ACCESS_KEY="$(AWS_SECRET_ACCESS_KEY)";
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      if [ "$(Build.SourceBranchName)" = "${BASE_BRANCH}" ]; then
        cache-s3 --prefix="${CACHE_S3_PREFIX}" --git-branch="$(Build.SourceBranchName)" --suffix="${OS_NAME}${EXTRA_SUFFIX}" save stack;
      fi;
      cache-s3 --prefix="${CACHE_S3_PREFIX}" --git-branch="$(Build.SourceBranchName)" --suffix="${OS_NAME}${EXTRA_SUFFIX}" save stack work
    condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'))
    env:
      OS_NAME: ${{ parameters.os }}
    displayName: 'Cache data'
