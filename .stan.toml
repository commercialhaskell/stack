# Partial: base/head
# Usage of partial function 'head' for lists
[[ignore]]
  id = "OBS-STAN-0001-1XF2BN-54:1"
# ✦ Category:      #Partial #List
# ✦ File:          src\Stack\Storage\Project.hs
#
#   54 ┃ share [ mkPersist sqlSettings

# Partial: base/head
# Usage of partial function 'head' for lists
[[ignore]]
  id = "OBS-STAN-0001-0pmobG-92:1"
# ✦ Category:      #Partial #List
# ✦ File:          src\Stack\Storage\User.hs
#
#   92 ┃ share [ mkPersist sqlSettings

# Partial: base/last
# On Windows
# To exclude .stack-work\dist\<hash>\build\stack\autogen\Paths_stack.hs
[[check]]
  id = "STAN-0004"
  directory = ".stack-work\\dist"
  type = "Exclude"

# Partial: base/last
# On Unix-like operating systems
# To exclude .stack-work/dist/<hash>/build/stack/autogen/Paths_stack.hs
[[check]]
  id = "STAN-0004"
  directory = ".stack-work/dist"
  type = "Exclude"

# Partial: ghc-internal/succ
# Usage of partial function 'succ' for enumerable types
# Stack uses Enum in many places
[[check]]
  id = "STAN-0010"
  scope = "all"
  type = "Exclude"

# Partial: ghc-internal/pred
# Usage of partial function 'pred' for enumerable types
# Stack uses Enum in many places
[[check]]
  id = "STAN-0011"
  scope = "all"
  type = "Exclude"

# Partial: ghc-internal/toEnum
# Usage of partial function 'toEnum' for enumerable types
# Stack uses Enum in many places
[[check]]
  id = "STAN-0012"
  scope = "all"
  type = "Exclude"

# Infinite: base/reverse
# Usage of the 'reverse' function that hangs on infinite lists
# Stack uses Data.List.reverse in many places
[[check]]
  id = "STAN-0101"
  scope = "all"
  type = "Exclude"

# Infinite: base/isSuffixOf
# Usage of the 'isSuffixOf' function that hangs on infinite lists
[[ignore]]
  id = "OBS-STAN-0102-luLR/n-534:30"
# ✦ Category:      #Infinite #List
# ✦ File:          src\Stack\New.hs
#
#  533 ┃
#  534 ┃   let isPkgSpec f = ".cabal" `L.isSuffixOf` f || "package.yaml" `L.isSuffixOf` f
#  535 ┃                              ^^^^^^^^^^^^^^

# Infinite: base/isSuffixOf
# Usage of the 'isSuffixOf' function that hangs on infinite lists
[[ignore]]
  id = "OBS-STAN-0102-luLR/n-534:65"
# ✦ Category:      #Infinite #List
# ✦ File:          src\Stack\New.hs
#
#  533 ┃
#  534 ┃   let isPkgSpec f = ".cabal" `L.isSuffixOf` f || "package.yaml" `L.isSuffixOf` f
#  535 ┃                                                                 ^^^^^^^^^^^^^^

# Infinite: ghc-internal/isSuffixOf
# Usage of the 'isSuffixOf' function that hangs on infinite lists
[[ignore]]
  id = "OBS-STAN-0102-8cspI6-401:41"
# ✦ Category:      #Infinite #List
# ✦ File:          src\Stack\Coverage.hs
#
#  400 ┃
#  401 ┃                   pure (filter ((".tix" `L.isSuffixOf`) . toFilePath) files)
#  402 ┃                         ^^^^^^^^^^^^^^

# Infinite: ghc-internal/isSuffixOf
# Usage of the 'isSuffixOf' function that hangs on infinite lists
[[ignore]]
  id = "OBS-STAN-0102-8cspI6-434:31"
# ✦ Category:      #Infinite #List
# ✦ File:          src\Stack\Coverage.hs
#
#  433 ┃
#  434 ┃         pure (filter ((".tix" `L.isSuffixOf`) . toFilePath) files)
#  435 ┃                         ^^^^^^^^^^^^^^

# Infinite: ghc-internal/isSuffixOf
# Usage of the 'isSuffixOf' function that hangs on infinite lists
[[ignore]]
  id = "OBS-STAN-0102-8cspI6-665:30"
# ✦ Category:      #Infinite #List
# ✦ File:          src\Stack\Coverage.hs
#
#  664 ┃
#  665 ┃       pure (filter ((".tix" `L.isSuffixOf`) . toFilePath) files)
#  666 ┃                         ^^^^^^^^^^^^^^

# Infinite: ghc-internal/isSuffixOf
# Usage of the 'isSuffixOf' function that hangs on infinite lists
[[ignore]]
  id = "OBS-STAN-0102-hTeu0Y-664:23"
# ✦ Category:      #Infinite #List
# ✦ File:          src\Stack\Init.hs
#
#  663 ┃
#  664 ┃   isCabal = (".cabal" `isSuffixOf`) . toFilePath
#  665 ┃                       ^^^^^^^^^^^^

# Infinite: base/length
# Usage of the 'length' function that hangs on infinite lists
# Stack uses Data.List.length in many places
[[check]]
  id = "STAN-0103"
  scope = "all"
  type = "Exclude"

# Anti-pattern: Data.ByteString.Char8.pack
[[ignore]]
  id = "OBS-STAN-0203-erw24B-1043:3"
# ✦ Description:   Usage of 'pack' function that doesn't handle Unicode characters
# ✦ Category:      #AntiPattern
# ✦ File:          src\Stack\Build\ExecuteEnv.hs
#
#  1042 ┃
#  1043 ┃   S8.pack . formatTime defaultTimeLocale "%Y-%m-%dT%H:%M:%S%6Q"
#  1044 ┃   ^^^^^^^

# Anti-pattern: Data.ByteString.Char8.pack
[[ignore]]
  id = "OBS-STAN-0203-tuE+RG-247:24"
# ✦ Description:   Usage of 'pack' function that doesn't handle Unicode characters
# ✦ Category:      #AntiPattern
# ✦ File:          src\Stack\Build\ExecutePackage.hs
#
#   246 ┃
#   247 ┃   newConfigFileRoot <- S8.pack . toFilePath <$> view configFileRootL
#   248 ┃                        ^^^^^^^

# Anti-pattern: Data.ByteString.Char8.pack
[[ignore]]
  id = "OBS-STAN-0203-hTeu0Y-395:17"
# ✦ Description:   Usage of 'pack' function that doesn't handle Unicode characters
# ✦ Category:      #AntiPattern
# ✦ File:          src\Stack\Init.hs
#
#  394 ┃
#  395 ┃   commentHelp = BC.pack .  intercalate "\n" . map commentLine
#  396 ┃                 ^^^^^^^

# Anti-pattern: Data.ByteString.Char8.pack
[[ignore]]
  id = "OBS-STAN-0203-hTeu0Y-412:26"
# ✦ Description:   Usage of 'pack' function that doesn't handle Unicode characters
# ✦ Category:      #AntiPattern
# ✦ File:          src\Stack\Init.hs
#
#  411 ┃
#  412 ┃         <> B.byteString (BC.pack $ concat
#  413 ┃                          ^^^^^^^

# Anti-pattern: Data.ByteString.Char8.pack
[[ignore]]
  id = "OBS-STAN-0203-axv1UG-354:32"
# ✦ Description:   Usage of 'pack' function that doesn't handle Unicode characters
# ✦ Category:      #AntiPattern
# ✦ File:          src\Stack\Docker.hs
#
#  353 ┃
#  354 ┃     hashRepoName = Hash.hash . BS.pack . takeWhile (\c -> c /= ':' && c /= '@')
#  355 ┃                                ^^^^^^^

# Data types with non-strict fields
# Defining lazy fields in data types can lead to unexpected space leaks
# Stack uses lazy fields in many places
[[check]]
  id = "STAN-0206"
  scope = "all"
  type = "Exclude"

# Anti-pattern: Slow 'length' for Text
# On Windows
[[check]]
  id = "STAN-0208"
  file = "src\\Stack\\Build\\ConstructPlan.hs"
  type = "Exclude"

# Anti-pattern: Slow 'length' for Text
# On Unix-like operating systems
[[check]]
  id = "STAN-0208"
  file = "src/Stack/Build/ConstructPlan.hs"
  type = "Exclude"

# Anti-pattern: Slow 'length' for Text
# On Windows
[[check]]
  id = "STAN-0208"
  file = "src\\Stack\\Build\\Execute.hs"
  type = "Exclude"

# Anti-pattern: Slow 'length' for Text
# On Unix-like operating systems
[[check]]
  id = "STAN-0208"
  file = "src/Stack/Build/Execute.hs"
  type = "Exclude"

# Anti-pattern: Slow 'length' for Text
# On Windows
[[check]]
  id = "STAN-0208"
  file = "src\\Stack\\PackageDump.hs"
  type = "Exclude"

# Anti-pattern: Slow 'length' for Text
# On Unix-like operating systems
[[check]]
  id = "STAN-0208"
  file = "src/Stack/PackageDump.hs"
  type = "Exclude"

# Anti-pattern: unsafe functions
[[ignore]]
  id = "OBS-STAN-0212-5rtOmw-480:33"
# ✦ Description:   Usage of unsafe functions breaks referential transparency
# ✦ Category:      #Unsafe #AntiPattern
# ✦ File:          src\Stack\Constants.hs
#
#  479 ┃
#  480 ┃ setupGhciShimCode = byteString $(do
#  481 ┃     path <- makeRelativeToProject "src/setup-shim/StackSetupShim.hs"
#  482 ┃     embedFile path)
#  483 ┃

# Anti-pattern: unsafe functions
[[ignore]]
  id = "OBS-STAN-0212-FNS1cF-67:17"
# ✦ Description:   Usage of unsafe functions breaks referential transparency
# ✦ Category:      #Unsafe #AntiPattern
# ✦ File:          src\Stack\BuildOpts.hs
#
#   66 ┃
#   67 ┃   buildMonoid = undefined :: BuildOptsMonoid
#   68 ┃                 ^^^^^^^^^

# Anti-pattern: unsafe functions
[[ignore]]
  id = "OBS-STAN-0212-FNS1cF-79:14"
# ✦ Description:   Usage of unsafe functions breaks referential transparency
# ✦ Category:      #Unsafe #AntiPattern
# ✦ File:          src\Stack\BuildOpts.hs
#
#   78 ┃
#   79 ┃   toMonoid = undefined :: TestOptsMonoid
#   80 ┃              ^^^^^^^^^

# Anti-pattern: unsafe functions
[[ignore]]
  id = "OBS-STAN-0212-FNS1cF-90:15"
# ✦ Description:   Usage of unsafe functions breaks referential transparency
# ✦ Category:      #Unsafe #AntiPattern
# ✦ File:          src/Stack/BuildOpts.hs
#
#   89 ┃
#   90 ┃   beoMonoid = undefined :: BenchmarkOptsMonoid
#   91 ┃               ^^^^^^^^^

# Anti-pattern: Pattern matching on '_'
# Pattern matching on '_' for sum types can create maintainability issues
# Stack uses pattern matching on '_' in many places.
[[check]]
  id = "STAN-0213"
  scope = "all"
  type = "Exclude"

# Big tuples
# Using tuples of big size (>= 4) can decrease code readability
# In serveral places Stack uses 4-tuples and in one place Stack uses a
# 5-tuple.
[[check]]
  id = "STAN-0302"
  scope = "all"
  type = "Exclude"
