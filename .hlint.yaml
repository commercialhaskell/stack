# HLint configuration file
# https://github.com/ndmitchell/hlint

- error: {lhs: "Network.HTTP.Client.MultipartFormData.formDataBody", rhs: "Network.HTTP.StackClient.formDataBody"}
- error: {lhs: "Network.HTTP.Client.MultipartFormData.partBS", rhs: "Network.HTTP.StackClient.partBS"}
- error: {lhs: "Network.HTTP.Client.MultipartFormData.partFileRequestBody", rhs: "Network.HTTP.StackClient.partFileRequestBody"}
- error: {lhs: "Network.HTTP.Client.MultipartFormData.partLBS", rhs: "Network.HTTP.StackClient.partLBS"}
- error: {lhs: "Network.HTTP.Client.Request.setUri", rhs: "Network.HTTP.StackClient.setUri"}
- error: {lhs: "Network.HTTP.Client.TLS.applyDigestAuth", rhs: "Network.HTTP.StackClient.applyDigestAuth"}
- error: {lhs: "Network.HTTP.Client.TLS.displayDigestAuthException", rhs: "Network.HTTP.StackClient.displayDigestAuthException"}
- error: {lhs: "Network.HTTP.Client.TLS.getGlobalManager", rhs: "Network.HTTP.StackClient.getGlobalManager"}
- error: {lhs: "Network.HTTP.Client.checkResponse", rhs: "Network.HTTP.StackClient.checkResponse"}
- error: {lhs: "Network.HTTP.Client.getUri", rhs: "Network.HTTP.StackClient.getUri"}
- error: {lhs: "Network.HTTP.Client.parseRequest", rhs: "Network.HTTP.StackClient.parseRequest"}
- error: {lhs: "Network.HTTP.Client.parseRequest_", rhs: "Network.HTTP.StackClient.parseRequest_"}
- error: {lhs: "Network.HTTP.Client.parseUrlThrow", rhs: "Network.HTTP.StackClient.parseUrlThrow"}
- error: {lhs: "Network.HTTP.Client.path", rhs: "Network.HTTP.StackClient.path"}
- error: {lhs: "Network.HTTP.Client.responseHeaders", rhs: "Network.HTTP.StackClient.responseHeaders"}
- error: {lhs: "Network.HTTP.Conduit.requestHeaders", rhs: "Network.HTTP.StackClient.requestHeaders"}
- error: {lhs: "Network.HTTP.Simple.HttpException", rhs: "Network.HTTP.StackClient.HttpException"}
- error: {lhs: "Network.HTTP.Simple.addRequestHeader", rhs: "Network.HTTP.StackClient.addRequestHeader"}
- error: {lhs: "Network.HTTP.Simple.getResponseBody", rhs: "Network.HTTP.StackClient.getResponseBody"}
- error: {lhs: "Network.HTTP.Simple.getResponseHeaders", rhs: "Network.HTTP.StackClient.getResponseHeaders"}
- error: {lhs: "Network.HTTP.Simple.getResponseStatusCode", rhs: "Network.HTTP.StackClient.getResponseStatusCode"}
- error: {lhs: "Network.HTTP.Simple.httpJSON", rhs: "Network.HTTP.StackClient.httpJSON"}
- error: {lhs: "Network.HTTP.Simple.httpLBS", rhs: "Network.HTTP.StackClient.httpLBS"}
- error: {lhs: "Network.HTTP.Simple.httpLbs", rhs: "Network.HTTP.StackClient.httpLbs"}
- error: {lhs: "Network.HTTP.Simple.httpNoBody", rhs: "Network.HTTP.StackClient.httpNoBody"}
- error: {lhs: "Network.HTTP.Simple.httpSink", rhs: "Network.HTTP.StackClient.httpSink"}
- error: {lhs: "Network.HTTP.Simple.setRequestBody", rhs: "Network.HTTP.StackClient.getRequestBody"}
- error: {lhs: "Network.HTTP.Simple.setRequestHeader", rhs: "Network.HTTP.StackClient.setRequestHeader"}
- error: {lhs: "Network.HTTP.Simple.setRequestManager", rhs: "Network.HTTP.StackClient.setRequestManager"}
- error: {lhs: "Network.HTTP.Simple.setRequestMethod", rhs: "Network.HTTP.StackClient.getRequestMethod"}
- error: {lhs: "Network.HTTP.Simple.withResponse", rhs: "Network.HTTP.StackClient.withResponse"}
- error: {lhs: "Network.HTTP.Types.Header", rhs: "Network.HTTP.StackClient.Header"}
- error: {lhs: "Network.HTTP.Types.HeaderName", rhs: "Network.HTTP.StackClient.HeaderName"}
- error: {lhs: "Network.HTTP.Types.Manager", rhs: "Network.HTTP.StackClient.Manager"}
- error: {lhs: "Network.HTTP.Types.Request", rhs: "Network.HTTP.StackClient.Request"}
- error: {lhs: "Network.HTTP.Types.RequestBody", rhs: "Network.HTTP.StackClient.RequestBody"}
- error: {lhs: "Network.HTTP.Types.Response", rhs: "Network.HTTP.StackClient.Response"}
- error: {lhs: "Network.HTTP.Types.hAccept", rhs: "Network.HTTP.StackClient.hAccept"}
- error: {lhs: "Network.HTTP.Types.hContentLength", rhs: "Network.HTTP.StackClient.hContentLength"}
- error: {lhs: "Network.HTTP.Types.hContentMD5", rhs: "Network.HTTP.StackClient.hContentMD5"}
- error: {lhs: "Network.HTTP.Types.methodPut", rhs: "Network.HTTP.StackClient.methodPut"}

# We define the above alternatives but then must ignore these with
# ignore "Use alternative" within Network.HTTP.StackClient.
- ignore:
    name: "Use alternative"
    within:
    - Network.HTTP.StackClient

# A number of extensions are implied by the use of GHC2021.
- extensions:
  - default: false
  # The following list provides an inventory of extensions used over and above
  # the GHC2021 set. Other extensions can be added, if need be.
  - name:
    - NoImplicitPrelude
    - DataKinds
    - DefaultSignatures
    - DerivingStrategies
    - GADTs
    - LambdaCase
    - MultiWayIf
    - OverloadedLists
    - OverloadedStrings
    - QuasiQuotes
    - RecordWildCards
    - ScopedTypeVariables
    - TypeFamilies
    - UndecidableInstances
    - ViewPatterns
  # Stack's code generally avoids the use of C preprocessor (CPP) directives.
  - name: CPP
    within:
    - GHC.Utils.GhcPkg.Main.Compat
    - Stack.BuildInfo
    - Stack.Constants
  # The following list provides an inventory of the small number of modules
  # where Template Haskell is used.
  - name: TemplateHaskell
    within:
    - Stack.Constants
    - Stack.Constants.Config
    - Stack.Constants.UsrLibDirs
    - Stack.Ghci.ScriptSpec
    - Stack.Storage.Project
    - Stack.Storage.User
  # src/setup-shim/StackSetupShim.hs is a resource, not part of Stack's code.
  - within: StackSetupShim
    name:
    - CPP
    - PackageImports
  # GHC.Utils.GhcPkg.Main.Compat's code largely comes from the GHC repository.
  - within: GHC.Utils.GhcPkg.Main.Compat
    name:
    - FlexibleInstances
    - KindSignatures
    - MultiParamTypeClasses
    - ScopedTypeVariables
    - TupleSections

# Not considered useful hints
- ignore:
    name: "Use camelCase"
    within:
    - System.Terminal
- ignore:
    name: "Avoid lambda using `infix`"
    within:
    - System.Process.Pager.pageWriter
- ignore:
    name: "Unused LANGUAGE pragma"
    within:
    - StackSetupShim
