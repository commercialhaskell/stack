name: Integration tests

on:
  pull_request:
  push:
    branches:
      - master
      - stable
      - rc/**
    tags:
      - '**'
  schedule:
  - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  integration-tests:
    name: Integration tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-latest
          release-args: "--alpine"
        - os: windows-latest
          release-args: ""
        - os: macos-latest
          release-args: ""
    steps:
      - name: Clone project
        uses: actions/checkout@v2
      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ~/.stack
          key: ${{ runner.os }}-${{ hashFiles('stack.yaml') }}
      - shell: bash
        name: Install deps and run checks
        run: |
          set -ex

          # Work around 'git status' always showing symlinks modified on Windows; see
          # https://github.com/git-for-windows/git/issues/2653#issuecomment-640234081
          git config --global core.fscache false

          stack upgrade || curl -sSL https://get.haskellstack.org/ | sh -s - -f

          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]
          then
            # Retry installing nix due to nondeterministic error
            #   Fatal error: glibc detected an invalid stdio handle
            # See:
            #   https://github.com/nh2/static-haskell-nix/pull/27#issuecomment-502652181
            #   https://github.com/NixOS/nix/issues/2733
            (for i in {1..5}; do bash <(curl -sSL https://nixos.org/nix/install) && exit 0; done; exit 1)
            . ~/.nix-profile/etc/profile.d/nix.sh
            nix-channel --add https://nixos.org/channels/nixos-19.09 nixpkgs
            nix-channel --update # Get GHC 8.2.2
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]
          then
            choco install nsis-unicode -y
          fi

          # Do this in the same step as installing deps to get relevant env var modifications
          stack etc/scripts/release.hs check ${{ matrix.release-args }}

          set +ex

      - shell: bash
        name: Build bindist
        run: stack etc/scripts/release.hs build ${{ matrix.release-args }}

      - name: Upload bindist
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}
          path: _release/stack-*

  github-release:
    name: Create Github release
    needs: integration-tests
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v2
        with:
          name: Linux
          path: _release
      - name: Download macOS artifact
        uses: actions/download-artifact@v2
        with:
          name: macOS
          path: _release
      - name: Download Windows artifact
        uses: actions/download-artifact@v2
        with:
          name: Windows
          path: _release
      - shell: bash
        name: Hash and sign assets
        env:
          RELEASE_SIGNING_KEY: ${{ secrets.RELEASE_SIGNING_KEY }}
        run: |
          set -e
          echo "$RELEASE_SIGNING_KEY"|gpg --import
          cd _release
          for asset in *; do
            shasum -a 256 "$asset" >"$asset.sha256"
            gpg --digest-algo=sha512 --detach-sig --armor -u 0x575159689BEFB442 "$asset"
          done
      - name: Set Github ref variables
        id: github_ref_vars
        run: |
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
      - name: Create Github release (final)
        if: "!startsWith(github.ref, 'refs/tags/rc/')"
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          body: |
            See https://haskellstack.org/ for installation and upgrade instructions.

            **Changes since v[INSERT PREVIOUS VERSION]:**

            [INSERT CHANGELOG]

            **Thanks to all our contributors for this release:**

            [INSERT CONTRIBUTORS]
          draft: true
          prerelease: false
      - name: Create Github release (release candidate)
        if: "startsWith(github.ref, 'refs/tags/rc/')"
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          body: |
            [APPEND ` (release candidate)` TO RELEASE NAME]
            **Changes since v[INSERT PREVIOUS VERSION]:**

            [INSERT CHANGELOG]
          draft: true
          prerelease: true
      - name: Upload assets to Github release (final)
        if: "!startsWith(github.ref, 'refs/tags/rc/')"
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "_release/*"
          tag_name: ${{ steps.github_ref_vars.outputs.SOURCE_TAG }}
          draft: true
          prerelease: false
          overwrite: true
      - name: Upload assets to Github release (release candidate)
        if: "startsWith(github.ref, 'refs/tags/rc/')"
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "_release/*"
          tag_name: ${{ steps.github_ref_vars.outputs.SOURCE_TAG }}
          draft: true
          prerelease: true
          overwrite: true
